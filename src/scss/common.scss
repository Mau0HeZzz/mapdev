@use "/src/scss/base/mixins.scss";
@use "/src/scss/variables.scss";
@use "sass:math";

// Заголовки, общие БЄМ блоки и прочее...
img {
  width: auto;
  height: auto;
  max-width: 100%;
}

[hidden] {
  display: none !important;
}

._md1dn {
  @media (max-width:mixins.toEm(variables.$pc)){
    display: none !important;
  }
}

._mmd1dn {
  @media (min-width:mixins.toEm(variables.$pc)){
    display: none !important;
  }
}

._md2dn {
  @media (max-width:mixins.toEm(variables.$tablet)){
    display: none !important;
  }
}

._mmd2dn {
  @media (min-width:mixins.toEm(variables.$tablet)){
    display: none !important;
  }
}

._md3dn {
  @media (max-width:mixins.toEm(variables.$mobile)){
    display: none !important;
  }
}

._mmd3dn {
  @media (min-width:mixins.toEm(variables.$mobile)){
    display: none !important;
  }
}

._md4dn {
  @media (max-width:mixins.toEm(variables.$mobileSmall)){
    display: none !important;
  }
}

._mmd4dn {
  @media (min-width:mixins.toEm(variables.$mobileSmall)){
    display: none !important;
  }
}

._pen {
  pointer-events: none;
}

._skeleton {
  overflow: hidden;
  position: relative;
  pointer-events: none;
  >* {
    position: relative;
    z-index: 1;
  }

  &::before{
    content:'';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #eee;
    z-index: 2;
    opacity: var(--opacity, 1);
  }
  
  &::after{
    content:'';
    position: absolute;
    top: -5%;
    left: calc(100% + mixins.toRem(60));
    width: mixins.toRem(40);
    height: 110%;
    rotate: 15deg;
    background-color: #fff;
    box-shadow: 0px 0px mixins.toRem(10) mixins.toRem(10) rgba(255, 255, 255, 1);
    z-index: 3;
    opacity: 0.4;
    animation: skeletonAfterAnim 1s ease infinite;
  }
}

@keyframes skeletonAfterAnim {
  from {
      left: -3.75rem
  }
}

.btn {
  display: inline-flex;
  justify-content:center;align-items: center;
  padding: mixins.toRem(12) mixins.toRem(20);
  border-radius: mixins.toRem(6);
  background-color: var(--bgc);
  color: var(--color);
  font-weight: 600;
  line-height: 1;
  transition: color 0.3s ease 0s, background-color 0.3s ease 0s, border-color 0.3s ease 0s;

  --color: var(--bg);
  --bgc: var(--heading);

  --hvbgc: var(--main-text);
  --hvcolor: var(--bg);

  --actbgc: var(--secondary-text);
  --actcolor: var(--bg);

  @media (prefers-color-scheme: dark) {
    --hvbgc: var(--blue-text);
    --hvcolor: var(--module);

    --actbgc: var(--acent-2);
    --actcolor: var(--heading);
  }

  @media (any-hover: hover){
    &:hover{
      color: var(--hvcolor, var(--color));
      background-color: var(--hvbgc, var(--bgc));
    }
  }

  &:active {
    transition: all 0s ease 0s;
    color: var(--actcolor, var(--color));
    background-color: var(--actbgc, var(--bgc));
  }

  &-big {
    padding: mixins.toRem(20);
  }

  &-negative {
    --color: var(--heading);
    --bgc: var(--bg);

    --hvbgc: var(--module);
    --hvcolor: var(--main-text);

    --actbgc: var(--acent-2);
    --actcolor: var(--bg);
  }

  &-blue {
    --color: light-dark(var(--bg), var(--heading));
    --bgc: var(--acent-1);

    --hvbgc: var(--acent-2);
    --hvcolor: light-dark(var(--bg), var(--heading));

    --actbgc: light-dark(var(--main-text), var(--blue-text));
    --actcolor: var(--bg);
  }

  &-white {
    --color: light-dark(var(--heading), var(--bg));
    --bgc: var(--white);

    --hvbgc: var(--blue-text);
    --hvcolor: light-dark(var(--main-text), var(--module));

    --actbgc: var(--acent-2);
    --actcolor: light-dark(var(--bg), var(--heading));
  }

  &[disabled] {
    opacity: 0.5;
    pointer-events: none;
  }
}

.form {

  &__item {
    --padding: #{mixins.toRem(20)};
    position: relative;
    input, textarea {
      background-color: var(--acent-2);
      border-radius: mixins.toRem(10);
      color: var(--heading);
      font-size: mixins.toRem(16);
      padding: var(--padding) var(--padding) calc(var(--padding) - mixins.toRem(8)) var(--padding);
      outline: none;
      .loaded & {
        transition: all 0.3s ease 0s;
      }
      &::placeholder {
        color: var(--blue-text);
      }
    }
    input {
      height: mixins.toRem(56);
    }
    textarea {
      padding:var(--padding);
      height: mixins.toRem(176);
      resize: none;
    }

    label {
      position: absolute;
      width: calc(100% - (var(--padding) * 2));
      top: var(--padding);
      left: var(--padding);
      color: var(--blue-text);
      pointer-events: none;
      transform-origin: top left;
      .loaded & {
        transition: all 0.3s ease 0s;
      }
    }

    &:has(textarea) {
      label {
        translate: 0;
        top: var(--padding);
      }
    }

    &._form-focus {
      input, textarea, label {
        color: var(--secondary-text);
      }
      input, textarea {
        background-color: var(--blue-text);
      }
    }

    &._form-input {
      label {
        scale: 0.75;
        translate: 0 -75%;
      }
    }
  }

  &__footer {
    display: grid;
    gap: mixins.toRem(10) mixins.toRem(35);
    @media (min-width:mixins.toEm(570)){
      grid-template-columns: repeat(2, 1fr);
    }
  }

  &__button {
  }

  &__footext {
    color: var(--blue-text);
    @include mixins.adaptiveValue("font-size", 20, 14, 1200, 576);

    a {
      text-decoration: underline;
      @media (any-hover: hover){
        &:hover{
          text-decoration: none;
        }
      }
    }
  }

  &__error {
    position: absolute;
    bottom: calc(100% + mixins.toRem(5));
    left: var(--padding);
    color: var(--error);
    font-size: mixins.toRem(13);
    &::before{
      content:'\2023';
      padding-right: mixins.toRem(5);
      line-height: 0.5;
      vertical-align: middle;
    }
  }
}

.section {
  padding-top: var(--padding);
  padding-bottom: var(--padding);
  @include mixins.adaptiveValue("--padding", 60, 25, 1200, 360);
  
  &-head {
    &:not(:last-child) {margin-bottom: mixins.toRem(50);}

    @media (max-width:mixins.toEm(variables.$pc)){
      &:not(:last-child) {margin-bottom: mixins.toRem(40);}
    }

    @media (max-width:mixins.toEm(variables.$mobile)){
      &:not(:last-child) {margin-bottom: mixins.toRem(30);}
    }
  }

  &-title {
    color: var(--heading);
    font-weight: 600;
    line-height: 1;

    @include mixins.adaptiveValue("font-size", 48, 24);
  }
}

._lights {
  pointer-events: none;
  aspect-ratio: 1;
  width: mixins.percent(749,520);
  background-image: url(../img/lights.svg);
  background-size: contain;
  background-position: center;
  background-repeat: no-repeat;
  z-index: -1;
}

._content {
  @include mixins.adaptiveValue("font-size", 20, 14, 1200, 767);
  >* {
    display: block;
    &:not(:last-child) {
      @include mixins.adaptiveValue("margin-bottom", 20, 10, 1024, 767);
    }
  }

  b {
    color: var(--heading);
    &:not(:last-child) {
      @include mixins.adaptiveValue("margin-bottom", 10, 5, 1024, 767);
    }
  }

  ul, ol{
    padding-left: mixins.toRem(27);
  }

  ul {
    li {
      list-style: initial;
    }
  }

  li {
    &:not(:last-child) {margin-bottom: mixins.toRem(4);}
  }

  h1, h2, h3, h4, h5, h6 {
    font-weight: 700;
    color: var(--heading);
  }

  h1 {
    @include mixins.adaptiveValue("font-size", 64, 32);
  }

  h2 {
    @include mixins.adaptiveValue("font-size", 48, 20);
  }
}